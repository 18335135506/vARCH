<?xml version="1.0" encoding="UTF-8"?>

<instructions>
    <head><![CDATA[
#ifndef _STDISTRUCTIONS_H
#define	_STDISTRUCTIONS_H

#include <map>
#include <string>
#include "../include/exceptions.h"

using namespace std;
]]>
    </head>
    <tail>
<![CDATA[
#endif	/* _STDISTRUCTIONS_H */]]>
    </tail>
    <definitions>
        <def>
            <name>N_ARGS_ZERO</name>
            <value><![CDATA[   0]]></value>
        </def>
        <def>
            <name>N_ARGS_ONE</name>
            <value><![CDATA[    (1 << 30)]]></value>
        </def>
        <def>
            <name>N_ARGS_TWO</name>
            <value><![CDATA[    (2 << 30)]]></value>
        </def>
        <def>
            <name>N_ARGS_THREE</name>
            <value><![CDATA[  (3 << 30)]]></value>
        </def>
        
        <def>
            <name>JUMP</name>
            <value><![CDATA[          (1 << 29)]]></value>
        </def>
        <def>
            <name>CONDITIONAL</name>
            <value><![CDATA[   (1 << 28)]]></value>
        </def>
        <def>
            <name>SYSTEM</name>
            <value><![CDATA[        (1 << 27)]]></value>
        </def>
        <def>
            <name>FLOAT</name>
            <value><![CDATA[         (1 << 26)]]></value>
        </def>

        <def>
            <comment>ARGS SECTION</comment>
            <name>RELATIVE_ARG</name>
            <value><![CDATA[  (1 <<  4)]]></value>
        </def>
    </definitions>
    <args>
        <!--
/* These bits occupy variably the positions from (1 << 25) to
 *    (1 << 23)
 *    (1 << 20)
 *    (1 << 17)
 * Varying on the number of arguments (on istructions non using them for args
 * type, they may be recycled.)
 */     -->

 <!-- /* Here the (1 << 1) bit stays for ADDR, and the (1 << 0) for REG */ -->
        <type><name>COST</name> <value><![CDATA[ 0]]></value>   </type>
        <type><name>REG</name>                  </type>
        <type><name>ADDR</name>                 </type>
        <type><name>ADDR_IN_REG</name>          </type>

 <!-- /* Here the (1 << 1) bit stays for INCR/DECR, and the (1 << 0) for PRE/POST */ -->
        <type><name>REG_PRE_INCR</name>         </type>
        <type><name>REG_PRE_DECR</name>         </type>
        <type><name>REG_POST_INCR</name>        </type>
        <type><name>REG_POST_DECR</name>        </type>

 <!-- /* Here the (1 << 1) bit stays for INCR/DECR, and the (1 << 0) for PRE/POST */ -->
        <type><name>ADDR_PRE_INCR</name>        </type>
        <type><name>ADDR_PRE_DECR</name>        </type>
        <type><name>ADDR_POST_INCR</name>       </type>
        <type><name>ADDR_POST_DECR</name>       </type>

 <!-- /* Here the (1 << 1) bit stays for INCR/DECR, and the (1 << 0) for PRE/POST */ -->
        <type><name>ADDR_IN_REG_PRE_INCR</name> </type>
        <type><name>ADDR_IN_REG_PRE_DECR</name> </type>
        <type><name>ADDR_IN_REG_POST_INCR</name></type>
        <type><name>ADDR_IN_REG_POST_DECR</name></type>
    </args>
    <!-- // could become the new standard
//enum Registers {
//  REG_R01 =   (1 <  0),
//  REG_R02 =   (1 <  1),
//  REG_R03 =   (1 <  2),
//  REG_R04 =   (1 <  3),
//  REG_R05 =   (1 <  4),
//  REG_R06 =   (1 <  5),
//  REG_R07 =   (1 <  6),
//  REG_R08 =   (1 <  7),
//  REG_A01 =   (1 <  8),
//  REG_A02 =   (1 <  9),
//  REG_A03 =   (1 < 10),
//  REG_A04 =   (1 < 11),
//  REG_A05 =   (1 < 12),
//  REG_A06 =   (1 < 13),
//  REG_A07 =   (1 < 14),
//  REG_A08 =   (1 < 15),
//
//  REG_SP  =   (1 < 16),
//  REG_USP =   (1 < 17)
//};
    -->
    <cpu>
        <instr>
            <name>SLEEP</name><value>N_ARGS_ZERO</value>
            <code><![CDATA[return istr;]]></code>
        </instr>
        <instr>
            <name>PUSHA</name><value></value>
            <code><![CDATA[sP.pushAllRegs();
      break;]]></code>
        </instr>
        <instr>
            <name>POPA</name><value></value>
            <code><![CDATA[sP.popAllRegs();
      break;]]></code>
        </instr>
        <instr>
            <name>RET</name><value></value>
            <code><![CDATA[progCounter = sP.pop();
      break;]]></code>
        </instr>
        <instr>
            <name>RETEX</name><value>N_ARGS_ZERO + SYSTEM</value>
            <code><![CDATA[flags += F_SVISOR;
      progCounter = sP.pop();
      newFlags = sP.pop();
      break;]]></code>
        </instr>
        <instr>
            <name>REBOOT</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>HALT</name><value></value>
            <code><![CDATA[return (flags & F_SVISOR) ? istr : SLEEP;]]></code>
        </instr>

        <instr>
            <name>NOT</name><value>N_ARGS_ONE</value>
            <code><![CDATA[temp = ~temp;
      break;]]></code>
        </instr>
        <instr>
            <name>INCR</name><value></value>
            <code><![CDATA[if (old > ++temp) flags += F_OVERFLOW;
      break;]]></code>
        </instr>
        <instr>
            <name>DECR</name><value></value>
            <code><![CDATA[if (old < --temp) flags += F_OVERFLOW;
      break;]]></code>
        </instr>
        <instr>
            <name>COMP2</name><value></value>
            <code><![CDATA[temp = -temp;
      break;]]></code>
        </instr>
        <instr>
            <name>LSH</name><value></value>
            <code><![CDATA[temp <<= 1;
      break;]]></code>
        </instr>
        <instr>
            <name>RSH</name><value></value>
            <code><![CDATA[temp >>= 1;
      break;]]></code>
        </instr>

        <instr>
            <name>STACK</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>PUSH</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>POP</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>JSR</name><value></value>
            <code></code>
        </instr>

        <instr>
            <name>JMP</name><value>N_ARGS_ONE + JUMP</value>
            <code></code>
        </instr>
        <instr>
            <name>IFJ</name><value>N_ARGS_ONE + JUMP + CONDITIONAL</value>
            <code></code>
        </instr>
        <instr>
            <name>IFNJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>TCJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>TZJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>TOJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>TNJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>TSJ</name><value></value>
            <code></code>
        </instr>

        <instr>
            <name>MOV</name><value>N_ARGS_TWO</value>
            <code></code>
        </instr>
        <instr>
            <name>ADD</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>MULT</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>SUB</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>DIV</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>QUOT</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>AND</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>OR</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>XOR</name><value></value>
            <code></code>
        </instr>

        <instr>
            <name>MMU</name><value>N_ARGS_TWO + SYSTEM</value>
            <code></code>
        </instr>

        <instr>
            <name>PUT</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>GET</name><value></value>
            <code></code>
        </instr>

        <instr>
            <name>EQ</name><value>N_ARGS_TWO + CONDITIONAL</value>
            <code></code>
        </instr>
        <instr>
            <name>LO</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>MO</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>LE</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>ME</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>NEQ</name><value></value>
            <code></code>
        </instr>

        <instr>
            <name>BPUT</name><value>N_ARGS_THREE + SYSTEM</value>
            <code></code>
        </instr>
        <instr>
            <name>BGET</name><value></value>
            <code></code>
        </instr>

        <instr>
            <name>IFEQJ</name><value>N_ARGS_THREE + JUMP + CONDITIONAL</value>
            <code></code>
        </instr>
        <instr>
            <name>IFNEQJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>IFLOJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>IFMOJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>IFLEJ</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>IFMEJ</name><value></value>
            <code></code>
        </instr>
    </cpu>
    <fpu>
        <instr>
            <name>FNOT</name><value>N_ARGS_ONE + FLOAT</value>
            <code></code>
        </instr>
        <instr>
            <name>FINCR</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>FDECR</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>FMOV</name><value>N_ARGS_TWO + FLOAT</value>
            <code></code>
        </instr>
        <instr>
            <name>FADD</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>FMULT</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>FSUB</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>FDIV</name><value></value>
            <code></code>
        </instr>
        <instr>
            <name>FQUOT</name><value></value>
            <code></code>
        </instr>
    </fpu>
</instructions>