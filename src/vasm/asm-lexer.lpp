/**/
%top{
#include "IR/IR_LowLevel_LexerHelpers.h"
#include "asm-parser.h"
}

%s STRING_CONTEXT
%s COMMENT

%x PREPROC_STATE_INCLUDE_FILE

DIGIT     [0-9]
LETTER    [a-zA-Z]
PUNCT     [-!"#$%&'()*+,./:;<=>?@[\\\]^_`{|}~]
LETT_DIG  ({LETTER}|{DIGIT})
ID        {LETTER}{LETT_DIG}*
KEYBKEYS  ([ \t]|{LETT_DIG}|[-!#$%&'()*+,./:;<=>?@[\\\]^_`{|}~])

LABEL     \.{ID}\:
AT_LABEL  \@{ID}
TO_LABEL  \.{ID}

STK_PTR   SP
USTK_PTR  USP
DREG      R[1-8]
AREG      A[1-8]
TREG      T{DIGIT}*
SREG      SR

REGISTER  \%([RA][1-8]|[U]?SP)
ADDR_REG  r?\(([RA][1-8]|[U]?SP)\)

%option bison-bridge bison-locations noyywrap

%{
#include "IncludesTree.h"

#include <stack>

using namespace std;

#define MAX_STR_CONST 256

char string_buf[MAX_STR_CONST];
char *string_buf_ptr;

#define YY_USER_ACTION \
   do {\
      yylloc->first_column = yylloc->last_column;\
      yylloc->last_column += yyleng;\
      yylloc->fileNode = includesTree->getCurrent();\
   } while(0);

struct FileBuffer {
  YY_BUFFER_STATE buff;         /* saved buffer */
  FILE * infile;                /* current file descriptor */
};

stack<FileBuffer> includesStack;

const vector<string> * includeDirs = NULL;

IncludesTree * includesTree = NULL;

FILE *
openFile(const char * filename, const char *& path);

%}

%%

<INITIAL>{

^[ \t]*"#"[ \t]*include { BEGIN(PREPROC_STATE_INCLUDE_FILE); }

^[ \t]*"#"[ \t]*pragma { return PREPROC_PRAGMA; }

^[ \t]*"#"[ \t]*define { return PREPROC_DEFINE; }

<<EOF>>   { if(!closeIncludeFile(yylloc)) yyterminate(); }

\${DIGIT}+ {
            yylval->integer = atoi(yytext+1);
            return INTEGER;
          }
\$({DIGIT}+\.{DIGIT}*|.{DIGIT}+) {
            yylval->real = atof(yytext+1);
            return REAL;
          }

SLEEP|PUSHA|POPA|RET|RETEX|REBOOT|HALT|NOT|INCR|DECR|COMP2|LSH|RSH|STACK|PUSH|POP|JSR|JMP|IFJ|IFNJ|TCJ|TZJ|TOJ|TNJ|TSJ|MOV|ADD|MULT|SUB|DIV|QUOT|AND|OR|XOR|MMU|PUT|GET|EQ|LO|MO|LE|ME|NEQ|BPUT|BGET|IFEQJ|IFNEQJ|IFLOJ|IFMOJ|IFLEJ|IFMEJ {
            yylval->instruction = ISet.getInstr(yytext);
            return INSTRUCTION;
          }

\.int       return KEYWORD_INT;
\.long      return KEYWORD_LONG;
\.real      return KEYWORD_REAL;
\.char      return KEYWORD_CHAR;
\.string    return KEYWORD_STRING;

\.const     return KEYWORD_CONST;
\.shared    return KEYWORD_SHARED;

\.local     return KEYWORD_LOCAL;
\.global    return KEYWORD_GLOBAL;
\.function  return KEYWORD_FUNCTION;
\.param     return KEYWORD_PARAM;
\.end       return KEYWORD_END;

\>{DIGIT}   yylval->integer = atoi(yytext+1); return CONTENT_CONST;
{LABEL}     yytext[yyleng-1] = '\0'; yylval->label = yytext+1; return DEF_LABEL;
{TO_LABEL}  yylval->label = yytext+1; return CONTENT_LABEL;
{AT_LABEL}  yylval->label = yytext+1; return POSITION_LABEL;

\%{SREG} {
            ArgumentsHandler::getSpecialReg(yylval->arg, yylloc,
                STATE_REGISTER);
            return REGISTER;
          }
\%{STK_PTR} {
            ArgumentsHandler::getSpecialReg(yylval->arg, yylloc,
                STACK_POINTER);
            return REGISTER;
          }
\%{USTK_PTR} {
            ArgumentsHandler::getSpecialReg(yylval->arg, yylloc,
                USER_STACK_POINTER);
            return REGISTER;
          }
\%{DREG} {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+2, REG,
                0, false);
            return REGISTER;
          }
\%{AREG} {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+2, REG,
                NUM_REGS, false);
            return REGISTER;
          }
\%{TREG} {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc, yytext+2,
                REG, false);
            return TEMPORARY;
          }
\+\%{DREG} {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+3,
                REG_PRE_INCR, 0, false);
            return REGISTER;
          }
\+\%{AREG} {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+3,
                REG_PRE_INCR, NUM_REGS, false);
            return REGISTER;
          }
\+\%{TREG} {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc, yytext+3,
                REG_PRE_INCR, false);
            return TEMPORARY;
          }
\-\%{DREG} {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+3,
                REG_PRE_DECR, 0, false);
            return REGISTER;
          }
\-\%{AREG} {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+3,
                REG_PRE_DECR, NUM_REGS, false);
            return REGISTER;
          }
\-\%{TREG} {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc, yytext+3,
                REG_PRE_DECR, false);
            return TEMPORARY;
          }
\%{DREG}\+ {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+2,
                REG_POST_INCR, 0, false);
            return REGISTER;
          }
\%{AREG}\+ {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+2,
                REG_POST_INCR, NUM_REGS, false);
            return REGISTER;
          }
\%{TREG}\+ {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc, yytext+2,
                REG_POST_INCR, false);
            return TEMPORARY;
          }
\%{DREG}\- {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+2,
                REG_POST_DECR, 0, false);
            return REGISTER;
          }
\%{AREG}\- {
            ArgumentsHandler::getReg(yylval->arg, yylloc, yytext+2,
                REG_POST_DECR, NUM_REGS, false);
            return REGISTER;
          }
\%{TREG}\- {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc, yytext+2,
                REG_POST_DECR, false);
            return TEMPORARY;
          }

r?\({SREG}\) {
            ArgumentsHandler::getSpecialAddrReg(yylval->arg, yylloc,
                STATE_REGISTER, L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({STK_PTR}\) {
            ArgumentsHandler::getSpecialAddrReg(yylval->arg, yylloc,
                STACK_POINTER, L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({USTK_PTR}\) {
            ArgumentsHandler::getSpecialAddrReg(yylval->arg, yylloc,
                USER_STACK_POINTER, L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({DREG}\) {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG, 0, L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({AREG}\) {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG, NUM_REGS,
                L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({TREG}\) {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG, L_IS_REL_0(yytext));
            return TEMPORARY;
          }
\+r?\({DREG}\) {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_1(yytext), ADDR_IN_REG_PRE_INCR, 0,
                L_IS_REL_1(yytext));
            return REGISTER;
          }
\+r?\({AREG}\) {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_1(yytext), ADDR_IN_REG_PRE_INCR,
                NUM_REGS, L_IS_REL_1(yytext));
            return REGISTER;
          }
\+r?\({TREG}\) {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_1(yytext), ADDR_IN_REG_PRE_INCR,
                L_IS_REL_1(yytext));
            return TEMPORARY;
          }
\-r?\({DREG}\) {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_1(yytext), ADDR_IN_REG_PRE_DECR, 0,
                L_IS_REL_1(yytext));
            return REGISTER;
          }
\-r?\({AREG}\) {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_1(yytext), ADDR_IN_REG_PRE_DECR,
                NUM_REGS, L_IS_REL_1(yytext));
            return REGISTER;
          }
\-r?\({TREG}\) {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_1(yytext), ADDR_IN_REG_PRE_DECR,
                L_IS_REL_1(yytext));
            return TEMPORARY;
          }
r?\({DREG}\)\+ {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG_POST_INCR, 0,
                L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({AREG}\)\+ {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG_POST_INCR,
                NUM_REGS, L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({TREG}\)\+ {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG_POST_INCR,
                L_IS_REL_0(yytext));
            return TEMPORARY;
          }
r?\({DREG}\)\- {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG_POST_DECR, 0,
                L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({AREG}\)\- {
            ArgumentsHandler::getReg(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG_POST_DECR,
                NUM_REGS, L_IS_REL_0(yytext));
            return REGISTER;
          }
r?\({TREG}\)\- {
            ArgumentsHandler::getTemporary(yylval->arg, yylloc,
                L_SHIFT_TXT_REL_0(yytext), ADDR_IN_REG_POST_DECR,
                L_IS_REL_0(yytext));
            return TEMPORARY;
          }

{ID}        yylval->id = yytext; return ID;

"/*"        BEGIN(COMMENT);

\" {
            string_buf_ptr = string_buf;
            BEGIN(STRING_CONTEXT);
          }

";".*\n|\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
            return END_LINE;
          }

{DIGIT}+{ID} {
            fprintf( stderr, "Line %4d Lexing Error, forbidden symbol: '%s'\n",
                     yylloc->first_line, yytext );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
[ \t]+      /* eat up whitespace */
,           return COMA;

. {
            fprintf( stderr, "Line %4d Lexing Error, unknown symbol: '%s'\n",
                     yylloc->first_line, yytext );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
}

<PREPROC_STATE_INCLUDE_FILE>{

[ \t]+      /* eat up whitespace */

[\"<].+[\">] {
            char * newFileName = new char[yyleng-1];
            if (!newFileName) {
              fprintf( stderr,
                       "Line %4d include filename too long (%4d chars): %s\n",
                       yylloc->first_line, yyleng-2, yytext+1 );
              includesTree->printStderrCurrent();
              includesTree->printStderrStackIncludes();
              exit(1);
            }
            strncpy(newFileName, yytext+1, yyleng-2);
            newFileName[yyleng-2] = '\0';
            if(!openIncludeFile(newFileName, yylloc)) {
              fprintf( stderr, "Line %4d inexisting include file name: %s\n",
                       yylloc->first_line, newFileName );
              includesTree->printStderrCurrent();
              includesTree->printStderrStackIncludes();
              exit(1);
            }
            delete newFileName;

            yylloc->first_line = 1, yylloc->first_column = 1;
            yylloc->last_line = 1,  yylloc->last_column = 1;
            yylloc->fileNode = includesTree->getCurrent();

            BEGIN(INITIAL);
          }

.|\n      {
            fprintf( stderr, "Line %4d bad include line\n", yylloc->first_line);
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
}

<COMMENT>{

<<EOF>>   {
            fprintf( stderr, "End of file in comment\n" );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }

\n  {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
            return END_LINE;
          }
"*/"        BEGIN(INITIAL);
.           /* eat up */
}

<STRING_CONTEXT>{

<<EOF>>   {
            fprintf( stderr, "End of file in string\n" );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }

\\n         *string_buf_ptr++ = '\n';
\\t         *string_buf_ptr++ = '\t';
\\r         *string_buf_ptr++ = '\r';
\\b         *string_buf_ptr++ = '\b';
\\f         *string_buf_ptr++ = '\f';

\\(.|\n) {
            *string_buf_ptr++ = yytext[0];
            *string_buf_ptr++ = yytext[1];
          }

[^\\\n\"]+ {
            char *yptr = yytext;
            while ( *yptr )
              *string_buf_ptr++ = *yptr++;
          }

\" {
            BEGIN(INITIAL);
            *string_buf_ptr = '\0';
            yylval->string = string_buf;
            return STRING;
          }
}

%%

void
setIncludeDirs(const vector<string> * _dirs)
{
  includeDirs = _dirs;
}

FILE *
openFile(const char * filename, const char *& path)
{
  if (!includeDirs) {
    throw BasicException("Implementation Error: Not initialized 'IncludeDirs'");
  }

  FILE * infile = fopen(filename, "r");
  path = ".";

  for(size_t dir = 0; !infile && dir < includeDirs->size(); dir++) {
    const string & inclDir = (*includeDirs)[dir];
    infile = fopen( ( inclDir + '/' + filename).c_str(), "r");
    path = inclDir.c_str();
  }

  return infile;
}

bool
openFirstFile(const char * const _filename)
{
  FileBuffer buff;
  const char * filepath = ".";
  
  buff.infile = openFile(_filename, filepath);
  if(!buff.infile) {
    perror(_filename);
    return false;
  }

  includesTree = new IncludesTree(filepath, _filename);

  buff.buff = yy_create_buffer(buff.infile, YY_BUF_SIZE);
  yy_switch_to_buffer(buff.buff);

  includesStack.push(buff);
  
  return true;
}

bool
openIncludeFile(const char * const _filename, const YYLTYPE * loc)
{
  FileBuffer buff;
  const char * filepath = ".";
  
  buff.infile = openFile(_filename, filepath);
  if(!buff.infile) {
    perror(_filename);
    return false;
  }

  includesTree->enterIncludeOfCurrent(filepath, _filename, *loc);

  buff.buff = yy_create_buffer(buff.infile, YY_BUF_SIZE);
  yy_switch_to_buffer(buff.buff);

  includesStack.push(buff);
  
  return true;
}

bool
closeIncludeFile(YYLTYPE * loc)
{
  if(!includesStack.size()) {
    return false;
  }

  FileBuffer buff = includesStack.top();
  fclose(buff.infile);
  yy_delete_buffer(buff.buff);

  includesStack.pop();  
  if(!includesStack.size()) {
    return false;
  }

  buff = includesStack.top();
  yy_switch_to_buffer(buff.buff);
  
  *loc = includesTree->getCurrentInclusionPosition();
  includesTree->exitInclude();

  return true;
}

void
cleanParser()
{
  delete includesTree;
}


