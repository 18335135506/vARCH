/**/
%top{
#include "IR_Low_parser.h"
}

%s STRING_CONTEXT
%s COMMENT

%x PREPROC_STATE_INCLUDE_FILE

%x PREPROC_STATE_DEFINE_NAME
%x PREPROC_STATE_DEFINE_DEF
%x PREPROC_STATE_DEFINE_ARGS
%x PREPROC_STATE_DEFINE_BODY

%x PREPROC_STATE_LINE_DEF
%x PREPROC_STATE_LINE_NUMBER

DIGIT     [0-9]
LETTER    [a-zA-Z]
PUNCT     [\-!"#$%&'()*+,./:;<=>?@[\\\]^_`{|}~]
LETT_DIG  ({LETTER}|{DIGIT})
ID        {LETTER}{LETT_DIG}*
KEYBKEYS  ([ \t]|{LETT_DIG}|[\-!#$%&'()*+,./:;<=>?@[\\\]^_`{|}~])

LABEL     \.{ID}\:
AT_LABEL  \@{ID}
TO_LABEL  \.{ID}

STK_PTR   SP
USTK_PTR  USP
SREG      SR
PCOUNT    PC

REGISTER  \%([RA][1-8]|[U]?SP)
ADDR_REG  r?\(([RA][1-8]|[U]?SP)\)

%option bison-bridge bison-locations noyywrap

%{
#include "IncludesTree.h"

#include <stack>
#include <sstream>

std::stringstream string_buff;
std::string readString;

#define YY_USER_ACTION \
   do {\
      yylloc->first_column = yylloc->last_column;\
      yylloc->last_column += yyleng;\
      yylloc->fileNode = includesTree->getCurrent();\
   } while(0);

struct FileBuffer {
  YY_BUFFER_STATE buff;         /* saved buffer */
  FILE * infile;                /* current file descriptor */
};

std::stack<FileBuffer> includesStack;

const std::vector<std::string> * includeDirs = NULL;

IncludesTree * includesTree = NULL;

FILE *
openFile(const char * filename, const char *& path);

%}

%%

<INITIAL>{

^[ \t]*"#"[ \t]*include { BEGIN(PREPROC_STATE_INCLUDE_FILE); }

^[ \t]*"#"[ \t]*line { BEGIN(PREPROC_STATE_LINE_NUMBER); }

^[ \t]*"#"[ \t]*define { BEGIN(PREPROC_STATE_DEFINE_NAME); return PREPROC_DEFINE; }

^[ \t]*"#"[ \t]*undefine { return PREPROC_UNDEFINE; }

<<EOF>>   { if(!closeIncludeFile(yylloc)) yyterminate(); }

({DIGIT}+|{DIGIT}+\.{DIGIT}*|.{DIGIT}+) {
            yylval->str.text = yytext;
            yylval->str.len = yyleng;
            return NUMBER;
          }

SLEEP|PUSHA|POPA|RET|RETEX|REBOOT|HALT|NOT|INCR|DECR|COMP2|LSH|RSH|STACK|PUSH|POP|JSR|JMP|IFJ|IFNJ|TCJ|TZJ|TOJ|TNJ|TSJ|MOV|ADD|MULT|SUB|DIV|QUOT|AND|OR|XOR|MMU|PUT|GET|EQ|LO|MO|LE|ME|NEQ|BPUT|BGET|IFEQJ|IFNEQJ|IFLOJ|IFMOJ|IFLEJ|IFMEJ {
            yylval->instruction = ISet.getInstr(yytext);
            return INSTRUCTION;
          }

BITCAST {
            return BITCAST_OP;
          }

\.i8_t      return KEYWORD_I8;
\.i16_t     return KEYWORD_I16;
\.i32_t     return KEYWORD_I32;
\.i64_t     return KEYWORD_I64;

\.real      return KEYWORD_REAL;
\.string    return KEYWORD_STRING;

\.const     return KEYWORD_CONST;
\.static    return KEYWORD_STATIC;
\.size      return KEYWORD_SIZE;
\.num       return KEYWORD_NUM;

\.local     return KEYWORD_LOCAL;
\.global    return KEYWORD_GLOBAL;
\.function  return KEYWORD_FUNCTION;
\.param     return KEYWORD_PARAM;
\.end       return KEYWORD_END;

(","|":"|";"|"("|")"|"{"|"}"|"["|"]"|"+"|"-") {
           return *yytext;
}

{LABEL}   {
            yytext[yyleng-1] = '\0';
            yylval->str.text = yytext+1;
            yylval->str.len = yyleng-2;
            return DEF_LABEL;
          }
{AT_LABEL} {
            yylval->str.text = yytext+1;
            yylval->str.len = yyleng-1;
            return REF_AT_LABEL;
          }
{TO_LABEL} {
            yylval->str.text = yytext+1;
            yylval->str.len = yyleng-1;
            return REF_TO_LABEL;
          }

\%{SREG} {
            yylval->special_reg = STATE_REGISTER;
            return SPECIAL_REGISTER;
          }
\%{STK_PTR} {
            yylval->special_reg = STACK_POINTER;
            return SPECIAL_REGISTER;
          }
\%{USTK_PTR} {
            yylval->special_reg = USER_STACK_POINTER;
            return SPECIAL_REGISTER;
          }
\%{PCOUNT} {
            yylval->special_reg = PROGRAM_COUNTER;
            return SPECIAL_REGISTER;
          }
\%{ID} {
            yylval->str.text = yytext+1;
            yylval->str.len = yyleng-1;
            return REGISTER;
          }

{ID} {
            yylval->str.text = yytext;
            yylval->str.len = yyleng;
            return ID;
          }

"/*"        BEGIN(COMMENT);

\" {
            string_buff.str("");
            BEGIN(STRING_CONTEXT);
          }

\\[ \t]*\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
          }

("//"|";").*\n|\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
            return END_LINE;
          }

{DIGIT}+{ID} {
            fprintf( stderr, "Line %4d Lexing Error, forbidden symbol: '%s'\n",
                     yylloc->first_line, yytext );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
[ \t]+      /* eat up whitespace */

. {
            fprintf( stderr, "Line %4d Lexing Error, unknown symbol: '%s'\n",
                     yylloc->first_line, yytext );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
}

<PREPROC_STATE_INCLUDE_FILE>{

[ \t]+      /* eat up whitespace */

[\"<].+[\">] {
            std::string newFileName(yytext+1, yyleng-2);
            if (!newFileName.size()) {
              fprintf( stderr,
                       "Line %4d include filename too long (%4lu chars): %s\n",
                       yylloc->first_line, yyleng-2, yytext+1 );
              includesTree->printStderrCurrent();
              includesTree->printStderrStackIncludes();
              exit(1);
            }
            if(!openIncludeFile(newFileName.c_str(), yylloc)) {
              fprintf( stderr, "Line %4d inexisting include file name: %s\n",
                       yylloc->first_line, newFileName.c_str() );
              includesTree->printStderrCurrent();
              includesTree->printStderrStackIncludes();
              exit(1);
            }

            yylloc->first_line = 1, yylloc->first_column = 1;
            yylloc->last_line = 1,  yylloc->last_column = 1;
            yylloc->fileNode = includesTree->getCurrent();

            BEGIN(INITIAL);
          }

.|\n      {
            fprintf( stderr, "Line %4d bad include line\n", yylloc->first_line);
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
}

<PREPROC_STATE_LINE_NUMBER>{

[ \t]+      /* eat up whitespace */


{DIGIT}+ {
            yylloc->first_line = atoi(yytext);
            yylloc->last_line = yylloc->first_line;
            BEGIN(PREPROC_STATE_LINE_DEF);
          }

. {
            fprintf( stderr, "Line %4d Lexing Error, After \"line\" pre-"
                     "processor statement there should be a digit. This was "
                     "found instead: '%s'\n",
                     yylloc->first_line, yytext );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
}

<PREPROC_STATE_LINE_DEF>{

[ \t]+      /* eat up whitespace */

\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
            BEGIN(INITIAL);
          }

. {
            fprintf( stderr, "Line %4d Lexing Error, After digit of \"line\" "
                     "pre-processor statement there should be a n-line. This "
                     "was found instead: '%s'\n",
                     yylloc->first_line, yytext );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }
}

<PREPROC_STATE_DEFINE_NAME>{

[ \t]+      /* eat up whitespace */

({ID}|"_")* {
            yylval->str.text = yytext;
            yylval->str.len = yyleng;
            BEGIN(PREPROC_STATE_DEFINE_DEF);
            return ID;
          }

}

<PREPROC_STATE_DEFINE_DEF>{

[ \t]+      /* eat up whitespace */

"(" {
            BEGIN(PREPROC_STATE_DEFINE_ARGS);
            return *yytext;
          }

\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
            BEGIN(INITIAL);

            string_buff.str("");
            readString = string_buff.str();
            yylval->str.text = readString.c_str();
            yylval->str.len = readString.size();
            return STRING;
          }
. {
            string_buff.str("");
            string_buff << *yytext;
            BEGIN(PREPROC_STATE_DEFINE_BODY);
          }

}

<PREPROC_STATE_DEFINE_ARGS>{

[ \t]+      /* eat up whitespace */

{ID} {
            yylval->str.text = yytext;
            yylval->str.len = yyleng;
            return ID;
          }

"," {
            return *yytext;
          }

")"[ \t]* {
            string_buff.str("");
            BEGIN(PREPROC_STATE_DEFINE_BODY);
            return *yytext;
          }

}

<PREPROC_STATE_DEFINE_BODY>{

\\[ \t]*\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
          }

\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
            BEGIN(INITIAL);

            readString = string_buff.str();
            yylval->str.text = readString.c_str();
            yylval->str.len = readString.size();
            return STRING;
          }

. {
            string_buff << *yytext;
          }

}

<COMMENT>{

<<EOF>>   {
            fprintf( stderr, "End of file in comment\n" );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }

\n  {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
          }
"*/"        BEGIN(INITIAL);
.           /* eat up */
}

<STRING_CONTEXT>{

<<EOF>>   {
            fprintf( stderr, "End of file in string\n" );
            includesTree->printStderrCurrent();
            includesTree->printStderrStackIncludes();
            exit(1);
          }

\\n         string_buff << '\n';
\\t         string_buff << '\t';
\\r         string_buff << '\r';
\\b         string_buff << '\b';
\\f         string_buff << '\f';

\\(.|\n) {
            string_buff << yytext[0] << yytext[1];
          }

[^\\\n\"]+ {
            string_buff << yytext;
          }

\" {
            BEGIN(INITIAL);
            readString = string_buff.str();
            yylval->str.text = readString.c_str();
            yylval->str.len = readString.size();
            return STRING;
          }
}

%%

void
setIncludeDirs(const std::vector<std::string> * _dirs)
{
  includeDirs = _dirs;
}

FILE *
openFile(const char * filename, const char *& path)
{
  if (!includeDirs) {
    throw BasicException("Implementation Error: Not initialized 'IncludeDirs'");
  }

  FILE * infile = fopen(filename, "r");
  path = ".";

  for(size_t dir = 0; !infile && dir < includeDirs->size(); dir++) {
    const std::string & inclDir = (*includeDirs)[dir];
    infile = fopen( ( inclDir + '/' + filename).c_str(), "r");
    path = inclDir.c_str();
  }

  return infile;
}

bool
openFirstFile(const char * const _filename)
{
  FileBuffer buff;
  const char * filepath = ".";
  
  buff.infile = openFile(_filename, filepath);
  if(!buff.infile) {
    perror(_filename);
    return false;
  }

  includesTree = new IncludesTree(filepath, _filename);

  buff.buff = yy_create_buffer(buff.infile, YY_BUF_SIZE);
  yy_switch_to_buffer(buff.buff);

  includesStack.push(buff);
  
  return true;
}

bool
openIncludeFile(const char * const _filename, const YYLTYPE * loc)
{
  FileBuffer buff;
  const char * filepath = ".";
  
  buff.infile = openFile(_filename, filepath);
  if(!buff.infile) {
    perror(_filename);
    return false;
  }

  includesTree->enterIncludeOfCurrent(filepath, _filename, *loc);

  buff.buff = yy_create_buffer(buff.infile, YY_BUF_SIZE);
  yy_switch_to_buffer(buff.buff);

  includesStack.push(buff);
  
  return true;
}

bool
closeIncludeFile(YYLTYPE * loc)
{
  if(!includesStack.size()) {
    return false;
  }

  FileBuffer buff = includesStack.top();
  fclose(buff.infile);
  yy_delete_buffer(buff.buff);

  includesStack.pop();  
  if(!includesStack.size()) {
    return false;
  }

  buff = includesStack.top();
  yy_switch_to_buffer(buff.buff);
  
  *loc = includesTree->getCurrentInclusionPosition();
  includesTree->exitInclude();

  return true;
}

void
cleanParser()
{
  delete includesTree;
}


